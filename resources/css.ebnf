digit: #'[0-9]'
nmstart: #'[A-Za-z_]'
nmchar: nmstart / #'[0-9\-]'
minus: '-'
ident: nmstart nmchar*
number: digit+ / (digit* '.' digit+)
ws: #'[ \t]'
nl: #'[\n]'
ws_or_nl = ws / nl
S = ws_or_nl
rule_lhs = selector more_selector*
more_selector =  ',' S* selector
        
selector: simple_selector selector_trailer?
selector_trailer:
        selector_trailer_a /
        selector_trailer_b /
        selector_trailer_c /
        selector_trailer_d
selector_trailer_a: combinator selector
selector_trailer_b: S+ combinator selector
selector_trailer_c: S+ selector
selector_trailer_d: S+
simple_selector:
        (element_name simple_selector_etc*) /
        (simple_selector_etc+)        
simple_selector_etc:
        id_selector /
        class_selector /
        attrib_selector /
        pseudo_selector
element_name:
        element_selector /
        wild_element_selector
element_selector: ident
wild_element_selector: '*'

id_selector: '#' ident
class_selector: '.' ident
attrib_selector:
        '[' S* ident ( ('=' / '~=' / '|=' ) S* ( ident / string ) S*)? ']'
pseudo_selector = ':' ident
tbd_pseudo_selector = ':' ident ( '(' ( ident S* )? ')' )?
combinator = ('+' / '>') S*
declaration = property ':' S* expr prio?
property = ident S*
prio = '!' S*
expr = term ( operator? term )*
operator = operator_a S*
operator_a =  '/' / ','
term = (unary_op) / other_term
unary_op = '-' / '+'
other_term = (string S*) / (ident S*) / (hexcolor S*)
string: #"[.*]+"
hexcolor: ('#' hex hex hex hex hex hex) / ('#' hex hex hex)
hex: #'[A-F0-9]'
